name: macOS-{10.15-11.0}

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-macos:
    strategy:
      matrix:
        include:
          - name: "macOS Catalina 10.15"
            os: macos-10.15
          - name: "macOS Big Sur 11.0"
            os: macos-11.0
      fail-fast: false

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    
    - name: Dependencies  # This qt6 build and we suppose apple accelerate was installed, but we can use openblas as a fallback until this is merged.
      run: | 
           brew update
           brew install protobuf coreutils qt libarchive openblas
    
    # Openblas location is exported explicitly because openblas is keg-only,
    # which means it was not symlinked into /usr/local/.
    - name: Set BLAS Environment variables
      run: |
          echo "LDFLAGS=-L/usr/local/opt/openblas/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I/usr/local/opt/openblas/include" >> $GITHUB_ENV
    
    - name: Work aroudn qt6 bug # https://github.com/Homebrew/homebrew-core/issues/73019 https://bugreports.qt.io/browse/QTBUG-91644
      run: sudo ln -s $(brew --prefix qt)/share/qt/plugins /usr/local/plugins
      

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE -j3

    - name: Output test # @TODO some more complicated test, perhaps a unit test
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: ./translateLocally --version

    - name:  Encode the arch in the .dmg file # as we build with march=native now, record our MARCH
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: |
          mv translateLocally.dmg translateLocally.`../dist/cpu_feature.sh`.dmg
          ls *.dmg
    
    - name: Upload .dmg file as build artifact
      uses: actions/upload-artifact@v2
      with:
        name: "Development build"
        path: ${{github.workspace}}/build/*.dmg

    #- uses: "marvinpinto/action-automatic-releases@latest"
    #  with:
    #      repo_token: "${{ secrets.GITHUB_TOKEN }}"
    #      automatic_release_tag: "latest"
    #      prerelease: true
    #      title: "Development Build"
    #      files: ${{github.workspace}}/build/*.dmg
